security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Security\AdminReadModel:
            algorithm: auto
        App\Security\SchoolStaffMemberReadModel:
            algorithm: auto
        App\Domain\Admin\Entity\AdminUser\AdminUser:
            algorithm: auto
        App\Domain\School\Entity\School\StaffMember:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        admin_user_provider:
            id: App\Security\AdminProvider
        school_user_provider:
            id: App\Security\SchoolStaffMemberProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        school:
            lazy: true
            pattern: ^/(api\/)?school
            custom_authenticator: App\Security\SchoolStaffMemberAuthenticator
            logout:
                path: school_logout
                target: school_login
                invalidate_session: false
        admin:
            lazy: true
            custom_authenticator: App\Security\AdminAuthenticator
            logout:
                path: !php/const App\Infrastructure\RouteEnum::ADMIN_LOGOUT
                target: !php/const App\Infrastructure\RouteEnum::ADMIN_LOGIN
                invalidate_session: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_SCHOOL_ADMIN
            - ROLE_SCHOOL_USER
        ROLE_SCHOOL_ADMIN:
            - ROLE_SCHOOL_USER
            - ROLE_USER

    access_control:
        - { route: !php/const App\Infrastructure\RouteEnum::HOME, roles: PUBLIC_ACCESS }
        - { route: school_member_register, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/school/login, roles: PUBLIC_ACCESS }
        - { path: ^/school/register, roles: PUBLIC_ACCESS }

        - { path: ^/(api\/)?school, roles: ROLE_SCHOOL_ADMIN }
        - { path: ^/(api\/)?admin, roles: ROLE_ADMIN }
        - { path: .*, roles: ROLE_ADMIN }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
